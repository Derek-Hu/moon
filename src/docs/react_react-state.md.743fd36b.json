{"content": "<article><h1>State</h1><ol><li><p>只能在构造器<code>constructor</code>中初始化<code>state</code></p></li></ol><pre lang=\"js\"><code>constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n}</code></pre><ol><li><p>修改<code>state</code>需调用<code>setState</code>方法，直接修<code>state</code>并不能导致界面重绘，更新UI</p></li></ol><pre lang=\"js\"><code>// Wrong\nthis.state.comment = 'Hello';\n\n// Correct\nthis.setState({comment: 'Hello'});</code></pre><ol><li><p>可以单独更新<code>state</code>中某一个状态信息，React将合并<code>state</code>的各个更新</p></li></ol><pre lang=\"js\"><code>constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      comments: []\n    };\n}\ncomponentDidMount() {\n    fetchPosts().then(response =&gt; {\n        this.setState({\n            posts: response.posts\n        });\n    });\n\n    fetchComments().then(response =&gt; {\n        this.setState({\n            comments: response.comments\n        });\n    });\n}</code></pre><ol><li><p><code>state</code>状态更新是异步的</p></li><li><p>React基于性能考虑，可能将多个<code>setState</code>调用合并为一个</p></li><li><p>由于<code>this.props</code>和<code>this.state</code>的更新可能是异步的，不能依赖它们来进行<code>state</code>状态的更新</p></li></ol><p>如下代码可能会执行失败</p><pre lang=\"js\"><code>// Wrong\nthis.setState({\n  counter: this.state.counter + this.props.increment,\n});</code></pre><p>可以使用如下写法来修复此问题</p><pre lang=\"js\"><code>// Correct\nthis.setState((state, props) =&gt; ({\n  counter: state.counter + props.increment\n}));\n\n// Correct\nthis.setState(function(state, props) {\n  return {\n    counter: state.counter + props.increment\n  };\n});</code></pre><p>然而以下代码仍然存在潜在的问题</p><pre lang=\"js\"><code>// Capturing values from the state outside of the setState callback.\nlet previousFoo = this.state.foo;\nthis.setState(function incrementFoo(previousState) {\n    // BAD! Setting `foo` based on a potentially outdated\n    // view of its current value: `foo` may have been updated\n    // in the meantime by another call to `setState`.\n    return { ...previousState, foo: previousFoo + 10 };\n});</code></pre><p>可以使用如下方法解决</p><pre lang=\"js\"><code>function incrementFooBy(delta) {\n    return (previousState, currentProps) =&gt; {\n        return { ...previousState, foo: previousState.foo + delta };\n    };\n}\nclass MyComponent extends React.Component {\n    onClick = () =&gt; {\n        this.setState(incrementFooBy(42));\n    }\n    render() {\n        return &lt;button onClick={onClick}&gt;click me&lt;/button&gt;;\n    }\n}</code></pre><p>如下代码可演示<code>setState</code>异步行为</p><pre lang=\"js\"><code>import React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Clock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            counter: 0,\n        };\n    }\n\n    componentDidMount() {\n        // Automatically update the state every 3 seconds.\n        setInterval(this.updateState, 3000);\n        // Update the state on mouse-down.\n        // --\n        // NOTE: We are implementing our own event binding here - not using the\n        // React Element props to manage the event handler.\n        document.getElementById('span')\n            .addEventListener(\"mousedown\", this.updateState)\n            ;\n    }\n\n    tick() {\n        this.setState({\n            date: this.state.date + 100000\n        });\n    }\n\n    updateState = (event) =&gt; {\n        console.log(\"= = = = = = = = = = = =\");\n        console.log(\"EVENT:\", (event ? event.type : \"timer\"));\n        console.log(\"Pre-setState:\", this.state.counter);\n        this.setState({\n            counter: (this.state.counter + 1)\n        });\n        console.log(\"Mid-setState:\", this.state.counter);\n        this.setState({\n            counter: (this.state.counter + 1)\n        });\n        console.log(\"Post-setState:\", this.state.counter);\n    }\n    render() {\n        return (\n            &lt;div&gt;\n                &lt;span id=\"span\" onClick={this.updateState} className=\"button\"&gt;\"Counter at \" + {this.state.counter}&lt;/span&gt;\n                &lt;h1&gt;Hello, world!&lt;/h1&gt;\n            &lt;/div &gt;\n        );\n    }\n}\n\nReactDOM.render(\n    &lt;Clock /&gt;,\n    document.getElementById('root')\n);</code></pre></article>"}